#
# Generated by erpcgen 1.10.0 on Sat Apr 22 14:59:30 2023.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from .. import common
from . import interface

# Client for rpc_wifi_drv
class rpc_wifi_drvClient(interface.Irpc_wifi_drv):
    def __init__(self, manager):
        super(rpc_wifi_drvClient, self).__init__()
        self._clientManager = manager

    def rpc_wifi_connect(self, ssid, password, security_type, key_id, semaphore):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_CONNECT_ID,
                sequence=request.sequence))
        if ssid is None:
            raise ValueError("ssid is None")
        codec.write_string(ssid)
        codec.write_null_flag(password is None)
        if password is not None:
            codec.write_string(password)
        if security_type is None:
            raise ValueError("security_type is None")
        codec.write_uint32(security_type)
        if key_id is None:
            raise ValueError("key_id is None")
        codec.write_int32(key_id)
        if semaphore is None:
            raise ValueError("semaphore is None")
        codec.write_uint32(semaphore)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_connect_bssid(self, bssid, ssid, password, security_type, key_id, semaphore):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_CONNECT_BSSID_ID,
                sequence=request.sequence))
        if bssid is None:
            raise ValueError("bssid is None")
        codec.write_binary(bssid)
        codec.write_null_flag(ssid is None)
        if ssid is not None:
            codec.write_string(ssid)
        if password is None:
            raise ValueError("password is None")
        codec.write_string(password)
        if security_type is None:
            raise ValueError("security_type is None")
        codec.write_uint32(security_type)
        if key_id is None:
            raise ValueError("key_id is None")
        codec.write_int32(key_id)
        if semaphore is None:
            raise ValueError("semaphore is None")
        codec.write_uint32(semaphore)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_disconnect(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_DISCONNECT_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_is_connected_to_ap(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_IS_CONNECTED_TO_AP_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_is_up(self, itf):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_IS_UP_ID,
                sequence=request.sequence))
        if itf is None:
            raise ValueError("itf is None")
        codec.write_uint32(itf)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_is_ready_to_transceive(self, itf):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_IS_READY_TO_TRANSCEIVE_ID,
                sequence=request.sequence))
        if itf is None:
            raise ValueError("itf is None")
        codec.write_uint32(itf)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_mac_address(self, mac):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_MAC_ADDRESS_ID,
                sequence=request.sequence))
        if mac is None:
            raise ValueError("mac is None")
        codec.write_binary(mac)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_get_mac_address(self, mac):
        assert type(mac) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_MAC_ADDRESS_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        mac.value = []
        for _i0 in range(18):
            _v0 = codec.read_uint8()
            mac.value.append(_v0)

        _result = codec.read_int32()
        return _result

    def rpc_wifi_enable_powersave(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_ENABLE_POWERSAVE_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_resume_powersave(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_RESUME_POWERSAVE_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_disable_powersave(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_DISABLE_POWERSAVE_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_btcoex_set_bt_on(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_BTCOEX_SET_BT_ON_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_wifi_btcoex_set_bt_off(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_BTCOEX_SET_BT_OFF_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_wifi_get_associated_client_list(self, client_list_buffer, buffer_length):
        assert type(client_list_buffer) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_ASSOCIATED_CLIENT_LIST_ID,
                sequence=request.sequence))
        if buffer_length is None:
            raise ValueError("buffer_length is None")
        codec.write_uint16(buffer_length)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        client_list_buffer.value = codec.read_binary()
        _result = codec.read_int32()
        return _result

    def rpc_wifi_get_ap_bssid(self, bssid):
        assert type(bssid) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_AP_BSSID_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        bssid.value = []
        for _i0 in range(6):
            _v0 = codec.read_uint8()
            bssid.value.append(_v0)

        _result = codec.read_int32()
        return _result

    def rpc_wifi_get_ap_info(self, ap_info, security):
        assert type(ap_info) is erpc.Reference, "out parameter must be a Reference object"
        assert type(security) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_AP_INFO_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        ap_info.value = codec.read_binary()
        security.value = codec.read_uint32()
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_country(self, country_code):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_COUNTRY_ID,
                sequence=request.sequence))
        if country_code is None:
            raise ValueError("country_code is None")
        codec.write_uint32(country_code)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_get_sta_max_data_rate(self, inidata_rate):
        assert type(inidata_rate) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_STA_MAX_DATA_RATE_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        inidata_rate.value = codec.read_uint8()
        _result = codec.read_int32()
        return _result

    def rpc_wifi_get_rssi(self, pRSSI):
        assert type(pRSSI) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_RSSI_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        pRSSI.value = codec.read_int32()
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_channel(self, channel):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_CHANNEL_ID,
                sequence=request.sequence))
        if channel is None:
            raise ValueError("channel is None")
        codec.write_int32(channel)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_get_channel(self, channel):
        assert type(channel) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_CHANNEL_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        channel.value = codec.read_int32()
        _result = codec.read_int32()
        return _result

    def rpc_wifi_change_channel_plan(self, channel_plan):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_CHANGE_CHANNEL_PLAN_ID,
                sequence=request.sequence))
        if channel_plan is None:
            raise ValueError("channel_plan is None")
        codec.write_uint8(channel_plan)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_register_multicast_address(self, mac):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_REGISTER_MULTICAST_ADDRESS_ID,
                sequence=request.sequence))
        if mac is None:
            raise ValueError("mac is None")
        for _i0 in mac:
            codec.write_uint8(_i0)


        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_unregister_multicast_address(self, mac):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_UNREGISTER_MULTICAST_ADDRESS_ID,
                sequence=request.sequence))
        if mac is None:
            raise ValueError("mac is None")
        for _i0 in mac:
            codec.write_uint8(_i0)


        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_rf_on(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_RF_ON_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_rf_off(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_RF_OFF_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_on(self, mode):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_ON_ID,
                sequence=request.sequence))
        if mode is None:
            raise ValueError("mode is None")
        codec.write_uint32(mode)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_off(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_OFF_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_mode(self, mode):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_MODE_ID,
                sequence=request.sequence))
        if mode is None:
            raise ValueError("mode is None")
        codec.write_uint32(mode)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_off_fastly(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_OFF_FASTLY_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_power_mode(self, ips_mode, lps_mode):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_POWER_MODE_ID,
                sequence=request.sequence))
        if ips_mode is None:
            raise ValueError("ips_mode is None")
        codec.write_uint8(ips_mode)
        if lps_mode is None:
            raise ValueError("lps_mode is None")
        codec.write_uint8(lps_mode)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_tdma_param(self, slot_period, rfon_period_len_1, rfon_period_len_2, rfon_period_len_3):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_TDMA_PARAM_ID,
                sequence=request.sequence))
        if slot_period is None:
            raise ValueError("slot_period is None")
        codec.write_uint8(slot_period)
        if rfon_period_len_1 is None:
            raise ValueError("rfon_period_len_1 is None")
        codec.write_uint8(rfon_period_len_1)
        if rfon_period_len_2 is None:
            raise ValueError("rfon_period_len_2 is None")
        codec.write_uint8(rfon_period_len_2)
        if rfon_period_len_3 is None:
            raise ValueError("rfon_period_len_3 is None")
        codec.write_uint8(rfon_period_len_3)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_lps_dtim(self, dtim):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_LPS_DTIM_ID,
                sequence=request.sequence))
        if dtim is None:
            raise ValueError("dtim is None")
        codec.write_uint8(dtim)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_get_lps_dtim(self, dtim):
        assert type(dtim) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_LPS_DTIM_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        dtim.value = codec.read_uint8()
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_lps_thresh(self, mode):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_LPS_THRESH_ID,
                sequence=request.sequence))
        if mode is None:
            raise ValueError("mode is None")
        codec.write_uint8(mode)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_lps_level(self, lps_level):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_LPS_LEVEL_ID,
                sequence=request.sequence))
        if lps_level is None:
            raise ValueError("lps_level is None")
        codec.write_uint8(lps_level)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_mfp_support(self, value):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_MFP_SUPPORT_ID,
                sequence=request.sequence))
        if value is None:
            raise ValueError("value is None")
        codec.write_uint8(value)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_start_ap(self, ssid, password, security_type, channel):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_START_AP_ID,
                sequence=request.sequence))
        if ssid is None:
            raise ValueError("ssid is None")
        codec.write_string(ssid)
        codec.write_null_flag(password is None)
        if password is not None:
            codec.write_string(password)
        if security_type is None:
            raise ValueError("security_type is None")
        codec.write_uint32(security_type)
        if channel is None:
            raise ValueError("channel is None")
        codec.write_int32(channel)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_start_ap_with_hidden_ssid(self, ssid, password, security_type, channel):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_START_AP_WITH_HIDDEN_SSID_ID,
                sequence=request.sequence))
        if ssid is None:
            raise ValueError("ssid is None")
        codec.write_string(ssid)
        codec.write_null_flag(password is None)
        if password is not None:
            codec.write_string(password)
        if security_type is None:
            raise ValueError("security_type is None")
        codec.write_uint32(security_type)
        if channel is None:
            raise ValueError("channel is None")
        codec.write_int32(channel)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_pscan_chan(self, channel_list, pscan_config):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_PSCAN_CHAN_ID,
                sequence=request.sequence))
        if channel_list is None:
            raise ValueError("channel_list is None")
        codec.write_binary(channel_list)
        if pscan_config is None:
            raise ValueError("pscan_config is None")
        codec.write_uint8(pscan_config)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_get_setting(self, ifname, pSetting):
        assert type(pSetting) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_SETTING_ID,
                sequence=request.sequence))
        if ifname is None:
            raise ValueError("ifname is None")
        codec.write_string(ifname)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        pSetting.value = codec.read_binary()
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_network_mode(self, mode):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_NETWORK_MODE_ID,
                sequence=request.sequence))
        if mode is None:
            raise ValueError("mode is None")
        codec.write_uint32(mode)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_get_network_mode(self, pmode):
        assert type(pmode) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_NETWORK_MODE_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        pmode.value = codec.read_uint32()
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_wps_phase(self, is_trigger_wps):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_WPS_PHASE_ID,
                sequence=request.sequence))
        if is_trigger_wps is None:
            raise ValueError("is_trigger_wps is None")
        codec.write_uint8(is_trigger_wps)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_restart_ap(self, ssid, password, security_type, channel):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_RESTART_AP_ID,
                sequence=request.sequence))
        if ssid is None:
            raise ValueError("ssid is None")
        codec.write_binary(ssid)
        if password is None:
            raise ValueError("password is None")
        codec.write_binary(password)
        if security_type is None:
            raise ValueError("security_type is None")
        codec.write_uint32(security_type)
        if channel is None:
            raise ValueError("channel is None")
        codec.write_int32(channel)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_config_autoreconnect(self, mode, retry_times, timeout):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_CONFIG_AUTORECONNECT_ID,
                sequence=request.sequence))
        if mode is None:
            raise ValueError("mode is None")
        codec.write_uint8(mode)
        if retry_times is None:
            raise ValueError("retry_times is None")
        codec.write_uint8(retry_times)
        if timeout is None:
            raise ValueError("timeout is None")
        codec.write_uint16(timeout)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_autoreconnect(self, mode):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_AUTORECONNECT_ID,
                sequence=request.sequence))
        if mode is None:
            raise ValueError("mode is None")
        codec.write_uint8(mode)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_get_autoreconnect(self, mode):
        assert type(mode) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_AUTORECONNECT_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        mode.value = codec.read_uint8()
        _result = codec.read_int32()
        return _result

    def rpc_wifi_get_last_error(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_LAST_ERROR_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_add_custom_ie(self, cus_ie):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_ADD_CUSTOM_IE_ID,
                sequence=request.sequence))
        if cus_ie is None:
            raise ValueError("cus_ie is None")
        codec.write_binary(cus_ie)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_update_custom_ie(self, cus_ie, ie_index):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_UPDATE_CUSTOM_IE_ID,
                sequence=request.sequence))
        if cus_ie is None:
            raise ValueError("cus_ie is None")
        codec.write_binary(cus_ie)
        if ie_index is None:
            raise ValueError("ie_index is None")
        codec.write_int32(ie_index)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_del_custom_ie(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_DEL_CUSTOM_IE_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_indicate_mgnt(self, enable):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_INDICATE_MGNT_ID,
                sequence=request.sequence))
        if enable is None:
            raise ValueError("enable is None")
        codec.write_int32(enable)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_wifi_get_drv_ability(self, ability):
        assert type(ability) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_DRV_ABILITY_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        ability.value = codec.read_uint32()
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_channel_plan(self, channel_plan):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_CHANNEL_PLAN_ID,
                sequence=request.sequence))
        if channel_plan is None:
            raise ValueError("channel_plan is None")
        codec.write_uint8(channel_plan)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_get_channel_plan(self, channel_plan):
        assert type(channel_plan) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_CHANNEL_PLAN_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        channel_plan.value = codec.read_uint8()
        _result = codec.read_int32()
        return _result

    def rpc_wifi_enable_forwarding(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_ENABLE_FORWARDING_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_disable_forwarding(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_DISABLE_FORWARDING_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_set_ch_deauth(self, enable):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_CH_DEAUTH_ID,
                sequence=request.sequence))
        if enable is None:
            raise ValueError("enable is None")
        codec.write_uint8(enable)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_get_band_type(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_BAND_TYPE_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint8()
        return _result

    def rpc_wifi_set_tx_pause_data(self, NewState):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SET_TX_PAUSE_DATA_ID,
                sequence=request.sequence))
        if NewState is None:
            raise ValueError("NewState is None")
        codec.write_uint32(NewState)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_get_reconnect_data(self, wifi_info):
        assert type(wifi_info) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_GET_RECONNECT_DATA_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        wifi_info.value = codec.read_binary()
        _result = codec.read_int32()
        return _result

    def rpc_wifi_clear_reconnect_data(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_CLEAR_RECONNECT_DATA_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_scan_start(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SCAN_START_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_wifi_is_scaning(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_IS_SCANING_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def rpc_wifi_scan_get_ap_records(self, number, _scanResult):
        assert type(_scanResult) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SCAN_GET_AP_RECORDS_ID,
                sequence=request.sequence))
        if number is None:
            raise ValueError("number is None")
        codec.write_uint16(number)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _scanResult.value = codec.read_binary()
        _result = codec.read_int32()
        return _result

    def rpc_wifi_scan_get_ap_num(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_SCAN_GET_AP_NUM_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint16()
        return _result

