#
# Generated by erpcgen 1.10.0 on Sat Apr 22 14:59:30 2023.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from .. import common
from . import interface

# Client for rpc_system
class rpc_systemClient(interface.Irpc_system):
    def __init__(self, manager):
        super(rpc_systemClient, self).__init__()
        self._clientManager = manager

    def rpc_system_version(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_SYSTEM_VERSION_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_string()
        return _result

    def rpc_system_ack(self, c):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_SYSTEM_ACK_ID,
                sequence=request.sequence))
        if c is None:
            raise ValueError("c is None")
        codec.write_uint8(c)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_uint8()
        return _result


