#
# Generated by erpcgen 1.10.0 on Sat Apr 22 14:59:30 2023.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from .. import common
from . import interface

# Client for rpc_wifi_callback
class rpc_wifi_callbackClient(interface.Irpc_wifi_callback):
    def __init__(self, manager):
        super(rpc_wifi_callbackClient, self).__init__()
        self._clientManager = manager

    def rpc_wifi_event_callback(self, event):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_EVENT_CALLBACK_ID,
                sequence=request.sequence))
        if event is None:
            raise ValueError("event is None")
        codec.write_binary(event)

        # Send request.
        self._clientManager.perform_request(request)

    def rpc_wifi_dns_found(self, hostname, ipaddr, arg):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_WIFI_DNS_FOUND_ID,
                sequence=request.sequence))
        if hostname is None:
            raise ValueError("hostname is None")
        codec.write_string(hostname)
        if ipaddr is None:
            raise ValueError("ipaddr is None")
        codec.write_binary(ipaddr)
        if arg is None:
            raise ValueError("arg is None")
        codec.write_binary(arg)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def rpc_tcpip_api_call_fn(self, func, call):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_TCPIP_API_CALL_FN_ID,
                sequence=request.sequence))
        if func is None:
            raise ValueError("func is None")
        codec.write_uint32(func)
        if call is None:
            raise ValueError("call is None")
        codec.write_binary(call)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_tcp_connected_fn(self, func, arg, tpcb, err_val):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_TCP_CONNECTED_FN_ID,
                sequence=request.sequence))
        if func is None:
            raise ValueError("func is None")
        codec.write_uint32(func)
        if arg is None:
            raise ValueError("arg is None")
        codec.write_binary(arg)
        if tpcb is None:
            raise ValueError("tpcb is None")
        codec.write_binary(tpcb)
        if err_val is None:
            raise ValueError("err_val is None")
        codec.write_int32(err_val)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_tcp_recv_fn(self, func, arg, tpcb, p_data, p_addr, err_val):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_TCP_RECV_FN_ID,
                sequence=request.sequence))
        if func is None:
            raise ValueError("func is None")
        codec.write_uint32(func)
        if arg is None:
            raise ValueError("arg is None")
        codec.write_binary(arg)
        if tpcb is None:
            raise ValueError("tpcb is None")
        codec.write_binary(tpcb)
        if p_data is None:
            raise ValueError("p_data is None")
        codec.write_binary(p_data)
        if p_addr is None:
            raise ValueError("p_addr is None")
        codec.write_binary(p_addr)
        if err_val is None:
            raise ValueError("err_val is None")
        codec.write_int32(err_val)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_tcp_accept_fn(self, func, arg, newpcb, err_val):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_TCP_ACCEPT_FN_ID,
                sequence=request.sequence))
        if func is None:
            raise ValueError("func is None")
        codec.write_uint32(func)
        if arg is None:
            raise ValueError("arg is None")
        codec.write_binary(arg)
        if newpcb is None:
            raise ValueError("newpcb is None")
        codec.write_binary(newpcb)
        if err_val is None:
            raise ValueError("err_val is None")
        codec.write_int32(err_val)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_tcp_err_fn(self, func, arg, err_val):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_TCP_ERR_FN_ID,
                sequence=request.sequence))
        if func is None:
            raise ValueError("func is None")
        codec.write_uint32(func)
        if arg is None:
            raise ValueError("arg is None")
        codec.write_binary(arg)
        if err_val is None:
            raise ValueError("err_val is None")
        codec.write_int32(err_val)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_tcp_sent_fn(self, func, arg, tpcb, len):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_TCP_SENT_FN_ID,
                sequence=request.sequence))
        if func is None:
            raise ValueError("func is None")
        codec.write_uint32(func)
        if arg is None:
            raise ValueError("arg is None")
        codec.write_binary(arg)
        if tpcb is None:
            raise ValueError("tpcb is None")
        codec.write_binary(tpcb)
        if len is None:
            raise ValueError("len is None")
        codec.write_uint16(len)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def rpc_tcp_poll_fn(self, func, arg, tpcb):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.RPC_TCP_POLL_FN_ID,
                sequence=request.sequence))
        if func is None:
            raise ValueError("func is None")
        codec.write_uint32(func)
        if arg is None:
            raise ValueError("arg is None")
        codec.write_binary(arg)
        if tpcb is None:
            raise ValueError("tpcb is None")
        codec.write_binary(tpcb)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result


